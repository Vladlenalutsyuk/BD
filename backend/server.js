const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const mysql = require('mysql2');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

const app = express();
const port = 3000;
const JWT_SECRET = 'your-secret-key'; // –ó–∞–º–µ–Ω–∏ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª—é—á –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ

app.use(cors());
app.use(bodyParser.json());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'vladlena121512', // –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å
  database: 'children_center',
});

db.connect((err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
    throw err;
  }
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!');
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT
const authenticateToken = (req, res, next) => {
  const token = req.headers['authorization']?.split(' ')[1];
  if (!token) return res.status(401).send('–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.status(403).send('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω');
    req.user = user;
    next();
  });
};

// üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/api/register', (req, res) => {
  const { username, email, password, role, phone, subject_id } = req.body;

  if (!username || !email || !password || !role) {
    return res.status(400).send('–í—Å–µ –ø–æ–ª—è (username, email, password, role) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
  }
  if (username.length > 50) return res.status(400).send('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤');
  if (email.length > 100) return res.status(400).send('Email –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤');
  if (!['admin', 'parent', 'teacher'].includes(role)) return res.status(400).send('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å');

  if ((role === 'parent' || role === 'teacher') && (!phone || phone.length > 15)) {
    return res.status(400).send('–ü–æ–ª–µ "–¢–µ–ª–µ—Ñ–æ–Ω" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–∏–º–≤–æ–ª–æ–≤');
  }

  if (role === 'teacher' && !subject_id) {
    return res.status(400).send('–ü–æ–ª–µ "–ü—Ä–µ–¥–º–µ—Ç" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —É—á–∏—Ç–µ–ª—è');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ subject_id
  const checkSubject = (callback) => {
    if (role !== 'teacher') return callback();
    db.query('SELECT id FROM subjects WHERE id = ?', [subject_id], (err, results) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞:', err);
        return res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      }
      if (results.length === 0) return res.status(400).send('–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      callback();
    });
  };

  bcrypt.hash(password, 10, (err, hash) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è:', err);
      return res.status(500).send('–û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è');
    }

    db.beginTransaction((err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', err);
        return res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      }

      db.query(
        'INSERT INTO users (username, email, password, role) VALUES (?, ?, ?, ?)',
        [username, email, hash, role],
        (err, result) => {
          if (err) {
            const errorMsg =
              err.code === 'ER_DUP_ENTRY'
                ? err.message.includes('username')
                  ? '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ'
                  : 'Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
                : err.message;
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            return db.rollback(() => res.status(500).send(errorMsg));
          }

          const userId = result.insertId;

          const finalize = () =>
            db.commit((err) => {
              if (err) {
                console.error('–û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', err);
                return db.rollback(() => res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'));
              }
              res.status(201).send(`${role[0].toUpperCase() + role.slice(1)} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
            });

          checkSubject(() => {
            if (role === 'teacher') {
              db.query(
                'INSERT INTO teachers (user_id, subject_id, phone) VALUES (?, ?, ?)',
                [userId, subject_id, phone],
                (err) =>
                  err
                    ? db.rollback(() => {
                        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∏—Ç–µ–ª—è:', err);
                        res.status(500).send('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∏—Ç–µ–ª—è');
                      })
                    : finalize()
              );
            } else if (role === 'parent') {
              db.query(
                'INSERT INTO parents (user_id, phone) VALUES (?, ?)',
                [userId, phone],
                (err) =>
                  err
                    ? db.rollback(() => {
                        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è:', err);
                        res.status(500).send('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è');
                      })
                    : finalize()
              );
            } else {
              finalize();
            }
          });
        }
      );
    });
  });
});

// üîê –í—Ö–æ–¥
app.post('/api/login', (req, res) => {
  const { email, password } = req.body;

  db.query('SELECT * FROM users WHERE email = ?', [email], (err, results) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
      return res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
    if (results.length === 0) return res.status(401).send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    const user = results[0];
    bcrypt.compare(password, user.password, (err, isMatch) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:', err);
        return res.status(500).send('–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è');
      }
      if (!isMatch) return res.status(401).send('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');

      const token = jwt.sign({ id: user.id, role: user.role }, JWT_SECRET);
      res.json({ user: { id: user.id, email: user.email, role: user.role, username: user.username }, token });
    });
  });
});

// üßë‚Äçüè´ –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
app.get('/api/subjects', (req, res) => {
  db.query('SELECT * FROM subjects', (err, results) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', err);
      return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤');
    }
    res.json(results);
  });
});

// üìç –°–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤
app.get('/api/rooms', authenticateToken, (req, res) => {
  db.query('SELECT * FROM rooms', (err, results) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤:', err);
      return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤');
    }
    res.json(results);
  });
});

// üì• –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
app.get('/api/teachers', authenticateToken, (req, res) => {
  db.query(
    `
    SELECT teachers.id, users.username AS name, subjects.name AS subject
    FROM teachers
    JOIN users ON teachers.user_id = users.id
    JOIN subjects ON teachers.subject_id = subjects.id
    `,
    (err, results) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:', err);
        return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π');
      }
      res.json(results);
    }
  );
});

// üìÖ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–Ω—è—Ç–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ —É—á–∏—Ç–µ–ª–µ–π)
app.get('/api/classes', authenticateToken, (req, res) => {
  if (req.user.role === 'teacher') {
    const userId = req.user.id;
    db.query('SELECT id FROM teachers WHERE user_id = ?', [userId], (err, teacherResults) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—á–∏—Ç–µ–ª—è:', err);
        return res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      }
      if (teacherResults.length === 0) return res.status(403).send('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

      const teacherId = teacherResults[0].id;
      db.query(
        `
        SELECT classes.id, subjects.name AS subject, classes.schedule, rooms.name AS room, classes.price
        FROM classes
        JOIN subjects ON classes.subject_id = subjects.id
        LEFT JOIN rooms ON classes.room_id = rooms.id
        WHERE teacher_id = ?
        `,
        [teacherId],
        (err, classResults) => {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π:', err);
            return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π');
          }
          res.json(classResults);
        }
      );
    });
  } else if (req.user.role === 'admin' || req.user.role === 'parent') {
    db.query(
      `
      SELECT classes.id, subjects.name AS subject, classes.schedule, rooms.name AS room, classes.price, users.username AS teacher_name
      FROM classes
      JOIN subjects ON classes.subject_id = subjects.id
      LEFT JOIN rooms ON classes.room_id = rooms.id
      LEFT JOIN teachers ON classes.teacher_id = teachers.id
      LEFT JOIN users ON teachers.user_id = users.id
      `,
      (err, classResults) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π:', err);
          return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π');
        }
        res.json(classResults);
      }
    );
  } else {
    return res.status(403).send('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
  }
});

// üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–∞)
app.post('/api/classes', authenticateToken, (req, res) => {
  const { subject_id, schedule, teacher_id, room_id, price } = req.body;

  if (req.user.role !== 'admin') {
    return res.status(403).send('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
  }

  if (!subject_id || !schedule || !teacher_id) {
    return res.status(400).send('–ü–æ–ª—è subject_id, schedule –∏ teacher_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
  }

  db.query(
    'INSERT INTO classes (subject_id, schedule, teacher_id, room_id, price) VALUES (?, ?, ?, ?, ?)',
    [subject_id, schedule, teacher_id, room_id, price || 0.00],
    (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è:', err);
        return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è');
      }
      res.status(201).send('–ó–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
    }
  );
});

// üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è
app.delete('/api/classes/:id', authenticateToken, (req, res) => {
  if (req.user.role !== 'admin') {
    return res.status(403).send('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
  }

  const classId = req.params.id;
  db.query('DELETE FROM classes WHERE id = ?', [classId], (err) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è:', err);
      return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è');
    }
    res.status(200).send('–ó–∞–Ω—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ');
  });
});

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–µ—Ç–µ–π —Ä–æ–¥–∏—Ç–µ–ª—è
app.get('/api/children', authenticateToken, (req, res) => {
  if (req.user.role !== 'parent') {
    return res.status(403).send('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
  }

  db.query('SELECT id FROM parents WHERE user_id = ?', [req.user.id], (err, parentResults) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–æ–¥–∏—Ç–µ–ª—è:', err);
      return res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
    if (parentResults.length === 0) return res.status(403).send('–†–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    const parentId = parentResults[0].id;
    db.query('SELECT id, name, birth_date FROM children WHERE parent_id = ?', [parentId], (err, results) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–µ–π:', err);
        return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–µ–π');
      }
      res.json(results);
    });
  });
});

// üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ (–¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è)
app.post('/api/children', authenticateToken, (req, res) => {
  if (req.user.role !== 'parent') {
    return res.status(403).send('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
  }

  const { name, birth_date } = req.body;
  if (!name || !birth_date) {
    return res.status(400).send('–ü–æ–ª—è name –∏ birth_date –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
  }
  if (name.length > 50) {
    return res.status(400).send('–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤');
  }

  db.query('SELECT id FROM parents WHERE user_id = ?', [req.user.id], (err, parentResults) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–æ–¥–∏—Ç–µ–ª—è:', err);
      return res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
    if (parentResults.length === 0) return res.status(403).send('–†–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    const parentId = parentResults[0].id;
    db.query(
      'INSERT INTO children (name, birth_date, parent_id) VALUES (?, ?, ?)',
      [name, birth_date, parentId],
      (err) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–±–µ–Ω–∫–∞:', err);
          return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–±–µ–Ω–∫–∞');
        }
        res.status(201).send('–†–µ–±–µ–Ω–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω');
      }
    );
  });
});

// üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ (–¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è)
app.get('/api/child-schedule', authenticateToken, (req, res) => {
  if (req.user.role !== 'parent') {
    return res.status(403).send('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
  }

  db.query('SELECT id FROM parents WHERE user_id = ?', [req.user.id], (err, parentResults) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–æ–¥–∏—Ç–µ–ª—è:', err);
      return res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
    if (parentResults.length === 0) return res.status(403).send('–†–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    const parentId = parentResults[0].id;
    db.query(
      `
      SELECT 
        children.id AS child_id,
        children.name AS child_name,
        subjects.name AS subject,
        classes.schedule,
        rooms.name AS room,
        users.username AS teacher
      FROM enrollments
      JOIN children ON enrollments.child_id = children.id
      JOIN classes ON enrollments.class_id = classes.id
      JOIN subjects ON classes.subject_id = subjects.id
      LEFT JOIN rooms ON classes.room_id = rooms.id
      LEFT JOIN teachers ON classes.teacher_id = teachers.id
      LEFT JOIN users ON teachers.user_id = users.id
      WHERE children.parent_id = ?
      `,
      [parentId],
      (err, results) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', err);
          return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
        }
        res.json(results);
      }
    );
  });
});

// üìå –ó–∞–ø–∏—Å—å —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ
app.post('/api/enrollments', authenticateToken, (req, res) => {
  if (req.user.role !== 'parent') {
    return res.status(403).send('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
  }

  const { child_id, class_id } = req.body;
  if (!child_id || !class_id) {
    return res.status(400).send('–ü–æ–ª—è child_id –∏ class_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–±–µ–Ω–æ–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ä–æ–¥–∏—Ç–µ–ª—é
  db.query('SELECT id FROM parents WHERE user_id = ?', [req.user.id], (err, parentResults) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–æ–¥–∏—Ç–µ–ª—è:', err);
      return res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
    if (parentResults.length === 0) return res.status(403).send('–†–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    const parentId = parentResults[0].id;
    db.query(
      'SELECT id FROM children WHERE id = ? AND parent_id = ?',
      [child_id, parentId],
      (err, childResults) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–±–µ–Ω–∫–∞:', err);
          return res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
        if (childResults.length === 0) return res.status(403).send('–†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è
        db.query('SELECT id FROM classes WHERE id = ?', [class_id], (err, classResults) => {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–Ω—è—Ç–∏—è:', err);
            return res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
          }
          if (classResults.length === 0) return res.status(404).send('–ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —Ä–µ–±–µ–Ω–æ–∫ —É–∂–µ –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ
          db.query(
            'SELECT id FROM enrollments WHERE child_id = ? AND class_id = ?',
            [child_id, class_id],
            (err, enrollmentResults) => {
              if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–∏—Å–∏:', err);
                return res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
              }
              if (enrollmentResults.length > 0) {
                return res.status(400).send('–†–µ–±–µ–Ω–æ–∫ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ');
              }

              // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
              db.query(
                'INSERT INTO enrollments (child_id, class_id) VALUES (?, ?)',
                [child_id, class_id],
                (err) => {
                  if (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ:', err);
                    return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ');
                  }
                  res.status(201).send('–†–µ–±–µ–Ω–æ–∫ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ');
                }
              );
            }
          );
        });
      }
    );
  });
});

// üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
app.post('/api/subjects', authenticateToken, (req, res) => {
  if (req.user.role !== 'admin') return res.status(403).send('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
  const { name } = req.body;
  if (!name || name.length > 100) {
    return res.status(400).send('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤');
  }
  db.query('INSERT INTO subjects (name) VALUES (?)', [name], (err) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:', err);
      return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞');
    }
    res.status(201).send('–ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω');
  });
});

// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∏—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)
app.get('/api/statistics/teachers', authenticateToken, (req, res) => {
  if (req.user.role !== 'admin') {
    return res.status(403).send('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
  }

  db.query(
    `
    SELECT 
      teacher_name,
      subject_name,
      class_count,
      total_students,
      total_revenue
    FROM teacher_statistics
    `,
    (err, results) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–∏—Ç–µ–ª–µ–π:', err);
        return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–∏—Ç–µ–ª–µ–π');
      }
      res.json(results);
    }
  );
});

// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ç–µ–π (–¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è)
app.get('/api/statistics/children', authenticateToken, (req, res) => {
  if (req.user.role !== 'parent') {
    return res.status(403).send('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
  }

  db.query('SELECT id FROM parents WHERE user_id = ?', [req.user.id], (err, parentResults) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–æ–¥–∏—Ç–µ–ª—è:', err);
      return res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
    if (parentResults.length === 0) return res.status(403).send('–†–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    const parentId = parentResults[0].id;
    db.query(
      `
      SELECT 
        child_name,
        class_count,
        total_cost
      FROM child_statistics
      WHERE parent_id = ?
      `,
      [parentId],
      (err, results) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–µ–π:', err);
          return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–µ–π');
        }
        res.json(results);
      }
    );
  });
});

// üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∏—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)
app.get('/api/users/teachers', authenticateToken, (req, res) => {
  if (req.user.role !== 'admin') {
    return res.status(403).send('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
  }

  db.query(
    `
    SELECT 
      users.id,
      users.username,
      users.email,
      subjects.name AS subject,
      teachers.phone
    FROM users
    JOIN teachers ON users.id = teachers.user_id
    JOIN subjects ON teachers.subject_id = subjects.id
    WHERE users.role = 'teacher'
    `,
    (err, results) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∏—Ç–µ–ª–µ–π:', err);
        return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∏—Ç–µ–ª–µ–π');
      }
      res.json(results);
    }
  );
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
});